USE 2109013290_MovieCo;

#3
SELECT MOVIE_NAME, MOVIE_YEAR, MOVIE_COST FROM MOVIE WHERE MOVIE_NAME LIKE "%hope%" ORDER BY MOVIE_NAME ASC;

#4
SELECT MOVIE_NAME, MOVIE_YEAR, MOVIE_GENRE FROM MOVIE WHERE MOVIE_GENRE = "ACTION";

#5
SELECT MOVIE_NUM, MOVIE_NAME, MOVIE_COST FROM MOVIE WHERE MOVIE_COST > 40.00;

#6
SELECT MOVIE_NUM, MOVIE_NAME, MOVIE_COST, MOVIE_GENRE FROM MOVIE WHERE MOVIE_COST < 50.00 AND (MOVIE_GENRE = "ACTION" OR MOVIE_GENRE = "COMEDY") ORDER BY MOVIE_GENRE ASC;

#7
SELECT MOVIE_NUM, CONCAT(MOVIE_NAME, " (", MOVIE_YEAR, ") ", MOVIE_GENRE) AS "Movie Description" FROM MOVIE;

#8
SELECT MOVIE_GENRE, COUNT(MOVIE_GENRE) AS "Number of Movies" FROM MOVIE GROUP BY MOVIE_GENRE;

#9
SELECT SUM(MOVIE_COST)/COUNT(MOVIE_COST) AS "Average Movie Cost" FROM MOVIE;

#10
SELECT MOVIE_GENRE, TRUNCATE(SUM(MOVIE_COST)/COUNT(MOVIE_GENRE), 2) AS "Average Cost" FROM MOVIE GROUP BY MOVIE_GENRE;

#11
SELECT MOVIE_NAME, MOVIE_GENRE, PRICE_DESCRIPTION, PRICE_RENTFEE 
FROM MOVIE
	JOIN PRICE
    ON MOVIE.PRICE_CODE = PRICE.PRICE_CODE;

#12
SELECT MOVIE_GENRE, TRUNCATE(SUM(PRICE_RENTFEE)/COUNT(PRICE_RENTFEE), 2) AS "Average Rental Fee"
FROM MOVIE
	JOIN PRICE
    ON MOVIE.PRICE_CODE = PRICE.PRICE_CODE
GROUP BY MOVIE_GENRE;

#13
SELECT MOVIE_NAME, MOVIE_YEAR, TRUNCATE(MOVIE_COST/PRICE_RENTALFEE, 2) AS "Breakeven Rentals"
FROM MOVIE
	JOIN PRICE
    ON MOVIE.PRICE_CODE = PRICE.PRICE_CODE;

#14
SELECT MOVIE_NAME, MOVIE_YEAR
FROM MOVIE
WHERE PRICE_CODE IS NOT NULL;

#15
SELECT MOVIE_NAME, MOVIE_YEAR, MOVIE_COST FROM MOVIE WHERE MOVIE_COST > 44.49 AND MOVIE_COST < 49.99;

#16
SELECT MOVIE_NAME, MOVIE_YEAR, PRICE_DESCRIPTION, PRICE_RENTFEE
FROM MOVIE
	JOIN PRICE
    ON MOVIE.PRICE_CODE = PRICE.PRICE_CODE
WHERE MOVIE_GENRE = "FAMILY" OR
	  MOVIE_GENRE = "COMEDY" OR
      MOVIE_GENRE = "DRAMA";

#17
SELECT MIN(MEM_BALANCE) AS "Minimum Balance", 
	   MAX(MEM_BALANCE) AS "Maximum Balance", 
       TRUNCATE(AVG(MEM_BALANCE), 2) AS "Average Balance"
FROM MEMBERSHIP 
WHERE MEM_NUM IN (SELECT MEM_NUM FROM RENTAL);

#18
SELECT CONCAT(MEM_FNAME, " ", MEM_LNAME) AS "Name",
	   CONCAT(MEM_STREET, " ", MEM_CITY, " ", MEM_STATE, " ", MEM_ZIP) AS "Address" 
FROM MEMBERSHIP;

#19
SELECT RENTAL.RENT_NUM,
	   DATE_FORMAT(RENT_DATE, "%d-%b-%y") AS "Rent_Date",
       VIDEO.VID_NUM,
       MOVIE_NAME,
       DATE_FORMAT(DETAIL_DUEDATE, "%d-%b-%y") AS "Detail_DueDate",
       DATE_FORMAT(DETAIL_RETURNDATE, "%d-%b-%y") AS "Detail_ReturnDate"
FROM RENTAL
	JOIN DETAILRENTAL
		ON RENTAL.RENT_NUM = DETAILRENTAL.RENT_NUM
    JOIN VIDEO
		ON DETAILRENTAL.VID_NUM = VIDEO.VID_NUM
    JOIN MOVIE
		ON VIDEO.MOVIE_NUM = MOVIE.MOVIE_NUM
WHERE DETAIL_DUEDATE < DETAIL_RETURNDATE;

#20
SELECT RENTAL.RENT_NUM,
	   DATE_FORMAT(RENT_DATE, "%d-%b-%y") AS "Rent_Date",
       VIDEO.VID_NUM,
       MOVIE_NAME,
       DATE_FORMAT(DETAIL_DUEDATE, "%d-%b-%y") AS "Detail_DueDate",
       DATE_FORMAT(DETAIL_RETURNDATE, "%d-%b-%y") AS "Detail_ReturnDate",
       DATEDIFF(DETAIL_RETURNDATE, DETAIL_DUEDATE) AS "Days Past Due"
FROM RENTAL
	JOIN DETAILRENTAL
		ON RENTAL.RENT_NUM = DETAILRENTAL.RENT_NUM
    JOIN VIDEO
		ON DETAILRENTAL.VID_NUM = VIDEO.VID_NUM
    JOIN MOVIE
		ON VIDEO.MOVIE_NUM = MOVIE.MOVIE_NUM
WHERE DETAIL_DUEDATE < DETAIL_RETURNDATE;

#21
SELECT RENTAL.RENT_NUM,
	   DATE_FORMAT(RENT_DATE, "%d-%b-%y") AS "Rent_Date",
       MOVIE_NAME,
       DETAIL_FEE
FROM RENTAL
	JOIN DETAILRENTAL
		ON RENTAL.RENT_NUM = DETAILRENTAL.RENT_NUM
    JOIN VIDEO
		ON DETAILRENTAL.VID_NUM = VIDEO.VID_NUM
    JOIN MOVIE
		ON VIDEO.MOVIE_NUM = MOVIE.MOVIE_NUM
WHERE DETAIL_DUEDATE >= DETAIL_RETURNDATE;

#22
SELECT * 
FROM MEMBERSHIP M
	JOIN RENTAL R
		ON M.MEM_NUM = R.MEM_NUM
	JOIN DETAILRENTAL D
		ON R.RENT_NUM = D.RENT_NUM;
        
#23
SELECT MOVIE_NUM, MOVIE_GENRE,
	   TRUNCATE((
		   SELECT AVG(MOVIE_COST) 
		   FROM MOVIE M2 
		   WHERE M1.MOVIE_GENRE = M2.MOVIE_GENRE),2)
	   AS "Average Cost", 
	   MOVIE_COST,
       TRUNCATE((
		   SELECT AVG(MOVIE_COST) 
		   FROM MOVIE M2 
		   WHERE M1.MOVIE_GENRE = M2.MOVIE_GENRE),2)
	   AS "Average Cost",
       TRUNCATE(
		   (MOVIE_COST
           -(SELECT AVG(MOVIE_COST) 
			 FROM MOVIE M2 
			 WHERE M1.MOVIE_GENRE = M2.MOVIE_GENRE))
		   /(SELECT AVG(MOVIE_COST) 
			 FROM MOVIE M2 
			 WHERE M1.MOVIE_GENRE = M2.MOVIE_GENRE)
			*100
	   ,2)
	   AS "Percent Diffrence" 
FROM MOVIE M1;

#24
ALTER TABLE DETAILRENTAL
ADD COLUMN DETAIL_DAYSLATE INT(3);

#25
ALTER TABLE VIDEO
ADD COLUMN VID_STATUS VARCHAR(4) NOT NULL DEFAULT "IN" CHECK (VID_STATUS IN ("IN","OUT","LOST"));

#26
UPDATE VIDEO V
	JOIN DETAILRENTAL D
		ON V.VID_NUM = D.VID_NUM
SET VID_STATUS  = "OUT"
WHERE DETAIL_RETURNDATE IS NULL;

SELECT * 
FROM VIDEO V
	JOIN DETAILRENTAL D
		ON V.VID_NUM = D.VID_NUM;

#27
ALTER TABLE PRICE
ADD COLUMN PRICE_RENTDAYS INT(2) NOT NULL DEFAULT 3;

#28
UPDATE PRICE SET PRICE_RENTDAYS = 5 WHERE PRICE_CODE = 1 OR PRICE_CODE = 3;
UPDATE PRICE SET PRICE_RENTDAYS = 7 WHERE PRICE_CODE = 4;

#29
DELIMITER //

DROP PROCEDURE IF EXISTS prc_new_rental//
CREATE PROCEDURE prc_new_rental (IN MEM_NUM_IN INT)# a
BEGIN
	IF (SELECT COUNT(*) FROM MEMBERSHIP WHERE MEM_NUM = MEM_NUM_IN) = 0 THEN # b
		SELECT CONCAT("Member ",MEM_NUM_IN," does not exist") AS "Message:";
    ELSE
		SELECT CONCAT("$",(SELECT MEM_BALANCE FROM MEMBERSHIP WHERE MEM_NUM = MEM_NUM_IN)) AS "Previous balance:";# c
        # d 
        # |
        # V
        # IMPORTANT TO READ! It says to insert a new row in the rental table using the sequence created in #42 above but I searched but found nothing above witch was 42, the exercises go from 1-29 and the figures go from 7.44 and up
		DECLARE naesta_numer INT DEFAULT (SELECT MAX(RENT_NUM) FROM RENTAL) + 1;# I have no idea why this does not work
        INSERT INTO 
			RENTAL(RENT_NUM, RENT_DATE, MEM_NUM)
		VALUES
			(naesta_numer, NOW(), MEM_NUM_IN);
	END IF;
END; //

DELIMITER ;

CALL prc_new_rental(103);

SELECT * FROM MEMBERSHIP;
SELECT * FROM DETAILRENTAL;
SELECT * FROM RENTAL;